var generators = require('yeoman-generator');
var options = {};

module.exports = generators.Base.extend({
  constructor: function() {
    generators.Base.apply(this, arguments);

    // This method adds support for a `--with-logger` flag
    this.option('with-logger');
    // This method adds support for a `--with-database` flag
    this.option('with-database');
    this.option('with-api-escape-csrf');
    this.option('with-client-auth');
    this.option('with-response-json');
    
    this.log('with-logger: ' + this.options['with-logger']);
    this.log('with-database: ' + this.options['with-database']);
    this.log('with-api-escape-csrf: ' + this.options['with-api-escape-csrf']);
    this.log('with-client-auth: ' + this.options['with-client-auth']);
    this.log('with-response-json: ' + this.options['with-response-json']);

    options.withLogger = this.options['with-logger'];
    options.withDatabase = this.options['with-database'];
    options.withApiEscapeCsrf = this.options['with-api-escape-csrf'];
    options.withClientAuth = this.options['with-client-auth'];
    options.withResponseJson = this.options['with-response-json'];
  },

  default: function() {

    this.fs.copyTpl(
      this.templatePath('index.js'),
      this.destinationPath('index.js'),
      options
    );
    this.fs.copyTpl(
      this.templatePath('lib/spec.js'),
      this.destinationPath('lib/spec.js'),
      options
    );
    this.fs.copyTpl(
      this.templatePath('config/config.json'),
      this.destinationPath('config/config.json'),
      options
    );
    this.fs.copyTpl(
      this.templatePath('config/development.json'),
      this.destinationPath('config/development.json'),
      options
    );
    
    if(options.withLogger){
      this.fs.copyTpl(
        this.templatePath('lib/logger.js'),
        this.destinationPath('lib/logger.js'),
        options
      );
    }
    if(options.withDatabase){
      this.fs.copyTpl(
        this.templatePath('lib/database.js'),
        this.destinationPath('lib/database.js'),
        options
      );
    }
    if(options.withClientAuth){
      this.fs.copyTpl(
        this.templatePath('lib/cacheHelper.js'),
        this.destinationPath('lib/cacheHelper.js'),
        options
      );
      this.fs.copyTpl(
        this.templatePath('lib/auth.js'),
        this.destinationPath('lib/auth.js'),
        options
      );
    }
    if(options.withResponseJson){
      this.fs.copyTpl(
        this.templatePath('lib/middlewear/responseJSON.js'),
        this.destinationPath('lib/middlewear/responseJSON.js'),
        options
      );
    }
    

    
    this.log('done');
  },

  install: function() {
    if(options.withLogger){
      this.npmInstall(['winston'], { 'save': true });
    }
    if(options.withDatabase){
      this.npmInstall(['mongoose'], { 'save': true });
    }
    if(options.withClientAuth){
      this.npmInstall(['redis'], { 'save': true });
      this.npmInstall(['async'], { 'save': true });
    }
    if(options.withResponseJson){
      this.npmInstall(['moment'], { 'save': true });
    }

    
  },


});
